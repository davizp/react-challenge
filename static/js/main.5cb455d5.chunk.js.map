{"version":3,"sources":["constants/actionTypes.ts","reducers/posts.ts","reducers/comments.ts","reducers/index.ts","store.ts","components/Comment.tsx","components/CommentList.tsx","services/placeholderService.ts","actions/comments.ts","components/AddCommentForm.tsx","components/Post.tsx","components/PostList.tsx","actions/posts.ts","pages/HomePage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["FETCH_POSTS_REQUEST","FETCH_POSTS_SUCCESS","FETCH_POSTS_FAILURE","FETCH_COMMENTS_REQUEST","FETCH_COMMENTS_SUCCESS","FETCH_COMMENTS_FAILURE","ADD_COMMENT","initialState","loading","error","posts","postsReducer","state","action","type","comments","reducer","comment","rootReducer","combineReducers","composeEnhancers","compose","middlewares","thunk","store","createStore","applyMiddleware","useStyles","makeStyles","wrapper","marginTop","marginBottom","padding","background","borderRadius","bold","fontWeight","Comment","props","name","body","classes","className","Typography","variant","component","Button","connect","useState","indexedCommentsByPostId","setIndexedCommentsByPostId","useEffect","indexedComments","initialValue","reduce","acc","postId","push","getIndexedCommentsByPostId","commentsByIndex","map","id","httpService","axios","create","baseURL","process","this","get","fetchCommentFailure","types","input","width","alignRight","textAlign","dispatch","addComment","setComment","setError","Grid","container","spacing","item","xs","OutlinedInput","placeholder","onChange","event","value","target","FormHelperText","color","onClick","randomNumber","Math","ceil","random","newComment","email","paddingTop","paddingBottom","expandMoreIcon","paddingRight","Post","title","showComments","setShowComments","showAddComment","setShowAddComment","Paper","elevation","justifyContent","ExpandLess","ExpandMore","AddCommentForm","PostList","postsState","post","fetchPostFailure","fetchPosts","a","PlaceholderService","response","status","data","message","fetchComments","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5cb455d5.chunk.js","sourcesContent":["export const FETCH_POSTS_REQUEST: string = 'FETCH_POSTS_REQUEST';\nexport const FETCH_POSTS_SUCCESS: string = 'FETCH_POSTS_SUCCESS';\nexport const FETCH_POSTS_FAILURE: string = 'FETCH_POSTS_FAILURE';\n\nexport const FETCH_COMMENTS_REQUEST: string = 'FETCH_COMMENTS_REQUEST';\nexport const FETCH_COMMENTS_SUCCESS: string = 'FETCH_COMMENTS_SUCCESS';\nexport const FETCH_COMMENTS_FAILURE: string = 'FETCH_COMMENTS_FAILURE';\n\nexport const ADD_COMMENT: string = 'ADD_COMMENT';","import {\n  FETCH_POSTS_REQUEST,\n  FETCH_POSTS_SUCCESS,\n  FETCH_POSTS_FAILURE,\n} from '../constants/actionTypes';\n\n// Types\nimport { PostAction } from '../actions/posts';\nimport { Post } from '../services/placeholderService';\n\n\nexport interface PostsState {\n  loading: boolean;\n  error: string;\n  posts: Post[];\n};\n\nconst initialState: PostsState = {\n  loading: false,\n  error: '',\n  posts: []\n};\n\nconst postsReducer = (state: PostsState = initialState, action: PostAction) => {\n  switch(action.type) {\n    case FETCH_POSTS_REQUEST:\n      return {\n        ...state,\n        loading: true\n      };\n\n    case FETCH_POSTS_SUCCESS:\n      return {\n        ...state,\n        error: '',\n        loading: false,\n        posts: action.posts\n      };\n\n    case FETCH_POSTS_FAILURE:\n      return {\n        ...state,\n        loading: false,\n        posts: [],\n        error: action.error\n      };\n\n    default:\n      return state;\n  }\n}\n\nexport default postsReducer;\n","import {\n  FETCH_COMMENTS_REQUEST,\n  FETCH_COMMENTS_SUCCESS,\n  FETCH_COMMENTS_FAILURE,\n  ADD_COMMENT\n} from '../constants/actionTypes';\n\n// Types\nimport { CommentsAction } from '../actions/comments';\nimport { Comment } from '../services/placeholderService';\n\n\nexport interface CommentsState {\n  loading: boolean;\n  error: string;\n  comments: Comment[];\n  comment?: Comment\n};\n\nconst initialState: CommentsState = {\n  loading: false,\n  error: '',\n  comments: []\n};\n\nconst reducer = (state: CommentsState = initialState, action: CommentsAction) => {\n  switch(action.type) {\n    case FETCH_COMMENTS_REQUEST:\n      return {\n        ...state,\n        loading: true\n      };\n\n    case FETCH_COMMENTS_SUCCESS:\n      return {\n        ...state,\n        error: '',\n        loading: false,\n        comments: action.comments\n      };\n\n    case FETCH_COMMENTS_FAILURE:\n      return {\n        ...state,\n        loading: false,\n        comments: [],\n        error: action.error\n      };\n\n    case ADD_COMMENT:\n      return {\n        ...state,\n        comments: [\n          { ...action.comment },\n          ...state.comments\n        ]\n      };\n\n    default:\n      return state;\n  }\n}\n\nexport default reducer;\n","import { combineReducers } from 'redux';\nimport posts from './posts';\nimport comments from './comments';\n\nconst rootReducer = combineReducers({\n  posts,\n  comments\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nexport default rootReducer;\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\n\nconst composeEnhancers = process.env.NODE_ENV !== 'production'\n  ? (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose // eslint-disable-line no-underscore-dangle\n  : compose;\n\n\nconst middlewares = [thunk];\n\nconst store = createStore(\n  rootReducer,\n  {},\n  composeEnhancers(applyMiddleware(...middlewares))\n);\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\n\nexport default store;\n","import React from 'react';\nimport { Typography, Button } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\n\ninterface Props {\n  name: string;\n  body: string;\n}\n\nconst useStyles = makeStyles({\n  wrapper: {\n    marginTop: '1rem',\n    marginBottom: '1rem',\n    padding: '1rem',\n    background: '#ccc',\n    borderRadius: 4,\n  },\n  bold: {\n    fontWeight: 'bold'\n  }\n});\n\ninterface Props {\n  name: string;\n  body: string;\n}\n\nfunction Comment(props: Props) {\n  const { name, body } = props;\n  const classes = useStyles();\n\n  return (\n    <div className={classes.wrapper}>\n      <Typography\n        className={classes.bold}\n        variant=\"subtitle1\"\n        component=\"h4\"\n        data-testid=\"name\"\n      >\n        {name}\n      </Typography>\n\n      <Typography data-testid=\"content\">{body}</Typography>\n\n      <Button>Like</Button>\n      <Button>Reply</Button>\n    </div>\n  );\n}\n\nexport default Comment;\n","import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { RootState } from '../store';\n\n// React Components\nimport Comment from './Comment';\n\n// Redux\nimport { CommentsState } from '../reducers/comments';\n\n// Types\nimport { Comment as CommentType } from '../services/placeholderService';\n\ninterface StateProps {\n  comments: CommentsState;\n}\n\ninterface OwnProps {\n  postId: string;\n}\n\ntype Props = StateProps & OwnProps;\n\ninterface IndexedCommentsByPostId {\n  [key: string]: CommentType[];\n}\n\nfunction CommentList(props: Props) {\n  const { loading, error, comments } = props.comments;\n  const [indexedCommentsByPostId, setIndexedCommentsByPostId] = useState<IndexedCommentsByPostId>({});\n\n  useEffect(() => {\n    const indexedComments = getIndexedCommentsByPostId(comments);\n\n    setIndexedCommentsByPostId(indexedComments);\n  }, [comments]);\n\n  if (loading) {\n    return <p>Loading</p>;\n  }\n\n  if (error) {\n    return <p>{error}</p>;\n  }\n  const commentsByIndex = indexedCommentsByPostId[props.postId] || [];\n\n  return (\n    <>\n      {commentsByIndex.map((comment: CommentType) => {\n        return <Comment key={`comment-${comment.id}`} name={comment.name} body={comment.body} />;\n      })}\n    </>\n  );\n}\n\nfunction getIndexedCommentsByPostId(comments: CommentType[]): IndexedCommentsByPostId {\n  const initialValue: IndexedCommentsByPostId = {};\n\n  return comments.reduce((acc, comment) => {\n    const postIdFound = acc[comment.postId];\n\n    if (!postIdFound) {\n      acc[comment.postId] = [];\n    }\n\n    acc[comment.postId].push(comment);\n\n    return acc;\n  }, initialValue);\n}\n\nconst mapStateToProps = (state: RootState | any): StateProps => ({\n  comments: state.comments\n});\n\nexport default connect<StateProps, {}, OwnProps>(mapStateToProps, {})(CommentList);\n","import axios, { AxiosResponse } from 'axios';\n\nexport interface Post {\n  userId: number;\n  id: string;\n  title: string;\n  body: string;\n};\n\nexport interface Comment {\n  postId: string;\n  id: number;\n  name: string;\n  email: string;\n  body: string;\n};\n\nconst baseURL = process.env.REACT_APP_API_URL || '';\n\nclass PlaceholderService {\n  private httpService = axios.create({\n    baseURL: `${baseURL}`,\n  })\n\n  fetchPosts(): Promise<AxiosResponse> {\n    return this.httpService.get('/posts');\n  }\n\n  fetchComments(): Promise<AxiosResponse> {\n    return this.httpService.get('/comments');\n  }\n}\n\nexport default new PlaceholderService();\n","import * as types from '../constants/actionTypes';\nimport PlaceholderService, { Comment } from '../services/placeholderService';\nimport { AppDispatch } from '../store';\n\nexport interface CommentsAction {\n  type: string;\n  comments?: Comment[];\n  error?: string;\n  comment?: Comment;\n}\n\nconst fetchCommentRequest = (): CommentsAction => ({\n  type: types.FETCH_COMMENTS_REQUEST\n});\n\nconst fetchCommentSuccess = (comments: Comment[]): CommentsAction => ({\n  type: types.FETCH_COMMENTS_SUCCESS,\n  comments\n});\n\nconst fetchCommentFailure = (error: string): CommentsAction => ({\n  type: types.FETCH_COMMENTS_FAILURE,\n  error\n});\n\nexport const addComment = (comment: Comment): CommentsAction => ({\n  type: types.ADD_COMMENT,\n  comment\n});\n\nexport function fetchComments() {\n  return async (dispatch: AppDispatch): Promise<void> => {\n    try {\n      dispatch(fetchCommentRequest());\n\n      const response = await PlaceholderService.fetchComments();\n\n      if (response.status >= 400) {\n        dispatch(fetchCommentFailure('Failed to fetch the comments'));\n        return;\n      }\n\n      dispatch(fetchCommentSuccess(response.data));\n    } catch (error) {\n      dispatch(fetchCommentFailure(error.message));\n    }\n  };\n}\n","import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { Grid, Button, OutlinedInput, FormHelperText } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\n\n// Redux\nimport { addComment } from '../actions/comments';\n\n// Types\nimport { Comment } from '../services/placeholderService';\n\ninterface DispatchProps {\n  addComment: (comment: Comment) => void;\n}\n\ninterface OwnProps {\n  postId: string;\n}\n\ntype Props = OwnProps & DispatchProps;\n\nconst useStyles = makeStyles({\n  wrapper: {\n    marginTop: '1rem',\n    marginBottom: '1rem',\n    padding: '1rem',\n    borderRadius: 4,\n  },\n  input: {\n    width: '100%',\n  },\n  alignRight: {\n    textAlign: 'right',\n  },\n});\n\nfunction AddComment(props: Props) {\n  const classes = useStyles();\n  const [comment, setComment] = useState<string>('');\n  const [error, setError] = useState<boolean>(false);\n\n  function handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n    const { value } = event.target;\n\n    if (comment && error) {\n      setError(false);\n    }\n\n    setComment(value);\n  }\n\n  function submitComment(): void {\n    const randomNumber: number = Math.ceil(Math.random() * 100000);\n\n    const newComment: Comment = {\n      postId: props.postId as string,\n      id: randomNumber,\n      name: 'John Doe',\n      email: `dummy${randomNumber}@test.com`,\n      body: comment\n    };\n\n    if (!comment) {\n      return setError(true);\n    }\n\n    props.addComment(newComment);\n\n    setComment('');\n  }\n\n  return (\n    <Grid container className={classes.wrapper} spacing={2}>\n      <Grid item xs={12}>\n        <OutlinedInput\n          className={classes.input}\n          placeholder=\"Write a comment\"\n          onChange={handleChange}\n          value={comment}\n          error={error}\n        />\n        {error && <FormHelperText>Comment must not be empty.</FormHelperText>}\n      </Grid>\n      <Grid item className={classes.alignRight} xs={12}>\n        <Button variant=\"contained\" color=\"primary\" onClick={submitComment}>Post Comment</Button>\n      </Grid>\n    </Grid>\n  );\n}\n\nconst mapDispatchToProps = (dispatch: Function): DispatchProps => {\n  return {\n    addComment: (comment: Comment): void => {\n      dispatch(addComment(comment));\n    }\n  };\n};\n\nexport default connect<{}, DispatchProps>(null, mapDispatchToProps)(AddComment);\n","import React, { useState } from 'react';\nimport { Grid, Typography, Button, Paper } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { ExpandMore, ExpandLess } from '@material-ui/icons';\n\n// Components\nimport CommentList from './CommentList';\nimport AddCommentForm from './AddCommentForm';\n\ninterface Props {\n  id: string;\n  title: string;\n  body: string;\n  comments: Comment[]\n}\n\nconst useStyles = makeStyles({\n  wrapper: {\n    padding: '1rem',\n    marginTop: '1rem',\n    marginBottom: '1rem'\n  },\n  body: {\n    paddingTop: '1rem',\n    paddingBottom: '1rem',\n  },\n  expandMoreIcon: {\n    paddingRight: '.5rem'\n  }\n});\n\nfunction Post(props: Props) {\n  const { id, title, body } = props;\n  const classes = useStyles();\n  const [showComments, setShowComments] = useState<boolean>(false);\n  const [showAddComment, setShowAddComment] = useState<boolean>(false);\n\n  function toggleComments(): void {\n    setShowComments(!showComments);\n  }\n\n  function handleReply() {\n    setShowAddComment(!showAddComment);\n  }\n\n  return (\n    <Paper className={classes.wrapper} elevation={4}>\n      <Typography variant=\"h6\" component=\"h3\" data-testid=\"title\">\n        {title}\n      </Typography>\n\n      <Typography className={classes.body} data-testid=\"content\">\n        {body}\n      </Typography>\n\n      <Grid container justifyContent=\"space-between\">\n        <Grid item>\n          <Button>Like</Button>\n          <Button onClick={handleReply}>Reply</Button>\n        </Grid>\n\n        <Grid item>\n          <Button onClick={toggleComments}>\n            {showComments\n              ? <ExpandLess className={classes.expandMoreIcon} />\n              : <ExpandMore className={classes.expandMoreIcon} />\n            } View Comments\n          </Button>\n        </Grid>\n      </Grid>\n\n      {showAddComment && <AddCommentForm postId={id} />}\n      {showComments && <CommentList postId={id} />}\n    </Paper>\n  );\n}\n\nexport default Post;\n","import React from 'react';\n\n// React Components\nimport Post from './Post';\n\n// Redux\nimport { PostsState } from '../reducers/posts';\n\n// Types\nimport { Post as PostType } from '../services/placeholderService';\n\ninterface Props {\n  postsState: PostsState;\n}\n\nfunction PostList(props: Props) {\n  const { loading, error, posts } = props.postsState;\n\n  if (loading) {\n    return <p>Loading</p>;\n  }\n\n  if (error) {\n    return <p>{error}</p>;\n  }\n\n  return (\n    <>\n      {posts.map((post: PostType) => (\n        <Post key={`post-${post.id}`} id={post.id} title={post.title} body={post.body} comments={[]} />\n      ))}\n    </>\n  );\n}\n\nexport default PostList;\n","import * as types from '../constants/actionTypes';\nimport PlaceholderService, { Post } from '../services/placeholderService';\nimport { AppDispatch } from '../store';\n\nexport interface PostAction {\n  type: string;\n  posts?: Post[];\n  error?: string;\n}\n\nconst fetchPostRequest = (): PostAction => ({\n  type: types.FETCH_POSTS_REQUEST\n});\n\nconst fetchPostSuccess = (posts: Post[]): PostAction => ({\n  type: types.FETCH_POSTS_SUCCESS,\n  posts\n});\n\nconst fetchPostFailure = (error: string): PostAction => ({\n  type: types.FETCH_POSTS_FAILURE,\n  error\n});\n\nexport function fetchPosts() {\n  return async (dispatch: AppDispatch): Promise<void> => {\n    try {\n      dispatch(fetchPostRequest());\n\n      const response = await PlaceholderService.fetchPosts();\n\n      if (response.status >= 400) {\n        dispatch(fetchPostFailure('Failed to fetch the posts'));\n        return;\n      }\n\n      dispatch(fetchPostSuccess(response.data));\n    } catch (error) {\n      dispatch(fetchPostFailure(error.message));\n    }\n  };\n}\n","// Libraries\nimport React, { ReactElement, useEffect } from 'react';\nimport { Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { connect } from 'react-redux';\nimport { RootState } from '../store';\n\n// Components\nimport PostList from '../components/PostList';\n\n// Redux\nimport { fetchPosts } from '../actions/posts';\nimport { fetchComments } from '../actions/comments';\nimport { CommentsState } from '../reducers/comments';\nimport { PostsState } from '../reducers/posts';\n\ninterface StateProps {\n  posts: PostsState,\n  comments: CommentsState\n};\n\ninterface DispatchProps {\n  fetchPosts: () => void,\n  fetchComments: () => void,\n};\n\ntype Props = DispatchProps & StateProps;\n\nconst useStyles = makeStyles({\n  wrapper: {\n    padding: 30\n  }\n});\n\nfunction HomePage(props: Props): ReactElement {\n  const classes = useStyles();\n\n  useEffect(() => {\n    props.fetchPosts();\n    props.fetchComments();\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <div className={classes.wrapper}>\n      <Typography variant=\"h3\" component=\"h2\">\n        Posts\n      </Typography>\n\n      <PostList postsState={props.posts} />\n    </div>\n  );\n}\n\nconst mapStateToProps = (state: RootState | any): StateProps => ({\n  posts: state.posts,\n  comments: state.comments\n});\n\nconst mapDispatchToProps = (dispatch: Function): DispatchProps => {\n  return {\n    fetchPosts: (): void => {\n      dispatch(fetchPosts());\n    },\n    fetchComments: (): void => {\n      dispatch(fetchComments());\n    }\n  };\n};\n\n\nexport default connect<StateProps, DispatchProps>(mapStateToProps, mapDispatchToProps)(HomePage);\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\n// Pages\nimport HomePage from './pages/HomePage';\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <HomePage />\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}